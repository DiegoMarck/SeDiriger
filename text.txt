.htacces racine
<IfModule mod_rewrite.c >
    RewriteEngine on
    RewriteOptions inherit

    # SSL and let's encrypt
    RewriteCond %{REQUEST_URI} !^/\.well-known/acme-challenge/.+$
    RewriteCond %{REQUEST_URI} !^/\.well-known/pki-validation/[A-F0-9]{32}\.txt(?:\ Comodo\ DCV)?$
    RewriteRule ^.well-known/acme-challenge - [L]

    # redirect to no-www
    RewriteBase /
    RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
    RewriteRule ^(.*)$ http://%1/$1 [R=301,L]

    # https redirect
    RewriteCond %{HTTPS} !=on
    RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]

    # redirect all requests to public directory
    RewriteCond %{REQUEST_URI} !public/
    RewriteRule (.*) /public/$1 [L]
</IfModule>

.htaccess de public public

# Use the front controller as index file. It serves as a fallback solution when
# every other rewrite/redirect fails (e.g. in an aliased environment without
# mod_rewrite). Additionally, this reduces the matching process for the
# start page (path "/") because otherwise Apache will apply the rewriting rules
# to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).
DirectoryIndex index.php

# By default, Apache does not evaluate symbolic links if you did not enable this
# feature in your server configuration. Uncomment the following line if you
# install assets as symlinks or if you experience problems related to symlinks
# when compiling LESS/Sass/CoffeScript assets.
# Options +FollowSymlinks

# Disabling MultiViews prevents unwanted negotiation, e.g. "/index" should not resolve
# to the front controller "/index.php" but be rewritten to "/index.php/index".
<IfModule mod_negotiation.c>
    Options -MultiViews
</IfModule>

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Determine the RewriteBase automatically and set it as environment variable.
    # If you are using Apache aliases to do mass virtual hosting or installed the
    # project in a subdirectory, the base path will be prepended to allow proper
    # resolution of the index.php file and to redirect to the correct URI. It will
    # work in environments without path prefix as well, providing a safe, one-size
    # fits all solution. But as you do not need it in this case, you can comment
    # the following 2 lines to eliminate the overhead.
    RewriteCond %{REQUEST_URI}::$0 ^(/.+)/(.*)::\2$
    RewriteRule .* - [E=BASE:%1]

    # Sets the HTTP_AUTHORIZATION header removed by Apache
    RewriteCond %{HTTP:Authorization} .+
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%0]

    # Redirect to URI without front controller to prevent duplicate content
    # (with and without `/index.php`). Only do this redirect on the initial
    # rewrite by Apache and not on subsequent cycles. Otherwise we would get an
    # endless redirect loop (request -> rewrite to front controller ->
    # redirect -> request -> ...).
    # So in case you get a "too many redirects" error or you always get redirected
    # to the start page because your Apache does not expose the REDIRECT_STATUS
    # environment variable, you have 2 choices:
    # - disable this feature by commenting the following 2 lines or
    # - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
    #   following RewriteCond (best solution)
    RewriteCond %{ENV:REDIRECT_STATUS} =""
    RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

    # If the requested filename exists, simply serve it.
    # We only want to let Apache serve files and not directories.
    # Rewrite all other queries to the front controller.
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ %{ENV:BASE}/index.php [L]
</IfModule>

<IfModule !mod_rewrite.c>
    <IfModule mod_alias.c>
        # When mod_rewrite is not available, we instruct a temporary redirect of
        # the start page to the front controller explicitly so that the website
        # and the generated links can still be used.
        RedirectMatch 307 ^/$ /index.php/
        # RedirectTemp cannot be used instead
    </IfModule>
</IfModule>


dans AnalyseOpenCVController.php  :

/**
* @Route("/analyse/open/c/v", name="app_analyse_open_c_v")
*/

premier script.py : 
import cv2

# Charger l'image à partir du fichier
image = cv2.imread('public/img/space_shuttle_liftoff_liftoff.jpg')

# Vérifier si l'image est chargée correctement
if image is None:
    print("Impossible de charger l'image.")
    exit()

# Convertir l'image en niveaux de gris
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Afficher l'image en niveaux de gris
cv2.imshow('Image en niveaux de gris', gray_image)

# Attendre une touche pour fermer la fenêtre
cv2.waitKey(0)

# Fermer toutes les fenêtres
cv2.destroyAllWindows()


partie node.js : 
// Require the child_process module from Node.js
const { spawn } = require('child_process');

// Function to start the Python script
const startPythonScript = () => {
    // Replace 'python' with 'python3' if 'python3' is the command to run Python 3 on your system
    const pythonProcess = spawn('python', ['/python/script.py']);

    // Listen for stdout data from the Python script
    pythonProcess.stdout.on('data', (data) => {
        console.log(`stdout: ${data}`);
    });

    // Listen for stderr data from the Python script
    pythonProcess.stderr.on('data', (data) => {
        console.error(`stderr: ${data}`);
    });

    // Listen for when the Python script closes
    pythonProcess.on('close', (code) => {
        console.log(`Python script exited with code ${code}`);
    });
};

// Call the function to start the Python script
startPythonScript();


ancien script.py : 
import cv2
import pygame

# Initialiser pygame pour la lecture audio
pygame.mixer.init()
pygame.mixer.music.load("public/mp3/detectionVisage.mp3")  # Remplacez "path/to/your/audio/message.mp3" par le chemin de votre fichier audio

# Capture vidéo à partir de la caméra par défaut
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Erreur: Impossible d'ouvrir la caméra.")
    exit()
    
# Chargement du classificateur de cascade pour la détection de visages
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

while True:
    # Capture d'une frame
    ret, frame = cap.read()
    
    if not ret:
        print("Erreur: Impossible de lire la frame de la caméra.")
        break

    # Convertir l'image en niveaux de gris
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Détection des visages dans l'image
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    
    # Si un visage est détecté, jouer le message audio
    if len(faces) > 0:
        pygame.mixer.music.play()
        # Attendre que le message audio se termine
        while pygame.mixer.music.get_busy():
            continue
    
    # Dessiner un rectangle autour des visages détectés
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
    
    # Affichage du résultat
    cv2.imshow('Face Detection', frame)
    
    # Attendre l'appui sur la touche 'q' pour quitter
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libérer la capture et détruire toutes les fenêtres OpenCV
cap.release()
cv2.destroyAllWindows()

2

import cv2
import pygame
import os

# Initialiser pygame pour la lecture audio
pygame.mixer.init()

# Chemin absolu du fichier audio
audio_path = os.path.join(os.getcwd(), "public", "mp3", "detectionVisage.mp3")
pygame.mixer.music.load(audio_path)

# Capture vidéo à partir de la caméra par défaut
cap = cv2.VideoCapture(0)

# Vérifier si la caméra est ouverte
if not cap.isOpened():
    print("Erreur: Impossible d'ouvrir la caméra.")
    exit()

# Chargement du classificateur de cascade pour la détection de visages
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

while True:
    # Capture d'une frame
    ret, frame = cap.read()
    
    # Vérifier si la lecture de la frame a réussi
    if not ret:
        print("Erreur: Impossible de lire la frame de la caméra.")
        break

    # Convertir l'image en niveaux de gris
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Détection des visages dans l'image
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    
    # Si un visage est détecté, jouer le message audio
    if len(faces) > 0:
        try:
            pygame.mixer.music.play()
            # Attendre que le message audio se termine
            while pygame.mixer.music.get_busy():
                continue
        except pygame.error:
            print("Erreur: Impossible de lire le fichier audio.")

    # Dessiner un rectangle autour des visages détectés
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
    
    # Affichage du résultat
    cv2.imshow('Face Detection', frame)
    
    # Attendre l'appui sur la touche 'q' pour quitter
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libérer la capture et détruire toutes les fenêtres OpenCV
cap.release()
cv2.destroyAllWindows()

